# alpha = 0.0001,
# lambda = 1
)
clf <- xgboost(params = param, data = dtrain, nrounds = 10,
verbose = T, maximize = FALSE)
# xgb_grid_1 = expand.grid( nrounds = 100, eta = c(0.01), max_depth = c(10),
#                           gamma = 1, colsample_bytree = 0.66, min_child_weight =1)
#
# # pack the training control parameters
# xgb_trcontrol_1 = trainControl(method = "cv", number = 5, verboseIter = TRUE, returnData = FALSE,
#                                returnResamp = "all", # save losses across all models
#                                classProbs = TRUE,  # set to TRUE for AUC to be computed
#                                summaryFunction = twoClassSummary,
#                                allowParallel = TRUE
# )
#
# xgb_train_1 = train(QuoteConversion_Flag~., data = train[1:1000, -1],
#   trControl = xgb_trcontrol_1,
#   tuneGrid = xgb_grid_1,
#   method = "xgbTree"
# )
stopCluster(cl)
Sys.time() - s
clf <- xgboost(params = param, data = dtrain, nrounds = 10,
verbose = T, maximize = FALSE)
library(xgboost)
clf <- xgboost(params = param, data = dtrain, nrounds = 10,
verbose = T, maximize = FALSE)
param <- list(objective = "binary:logistic", booster = "gbtree", eval_metric = "auc", #nthread = 8,
eta = 0.01, # 0.06, #0.01,
max_depth = 10, #changed from default of 8
subsample = 0.85, # 0.7
colsample_bytree = 0.66 # 0.7
#num_parallel_tree   = 2
# alpha = 0.0001,
# lambda = 1
)
clf <- xgboost(params = param, data = dtrain, nrounds = 10,
verbose = T, maximize = FALSE)
setwd("~/Dropbox/Data project/Kaggle Homesite")
library(readr)
library(xgboost)
library(doParallel)
library(caret)
set.seed(308)
cat("reading the train and test data\n")
train <- read_csv("input/train.csv")
test  <- read_csv("input/test.csv")
# There are some NAs in the integer columns so conversion to zero
train[is.na(train)]   <- -1
test[is.na(test)]   <- -1
# cat("train data column names and details\n")
# names(train)
# str(train)
# summary(train)
# cat("test data column names and details\n")
# names(test)
# str(test)
# summary(test)
# seperating out the elements of the date column for the train set
train$month <- as.integer(format(train$Original_Quote_Date, "%m"))
train$year <- as.integer(format(train$Original_Quote_Date, "%y"))
train$day <- weekdays(as.Date(train$Original_Quote_Date))
# removing the date column
train <- train[,-c(2)]
# seperating out the elements of the date column for the train set
test$month <- as.integer(format(test$Original_Quote_Date, "%m"))
test$year <- as.integer(format(test$Original_Quote_Date, "%y"))
test$day <- weekdays(as.Date(test$Original_Quote_Date))
# removing the date column
test <- test[,-c(2)]
feature.names <- names(train)[c(3:301)]
# cat("Feature Names\n")
# feature.names
cat("assuming text variables are categorical & replacing them with numeric ids\n")
for (f in feature.names) {
if (class(train[[f]])=="character") {
levels <- unique(c(train[[f]], test[[f]]))
train[[f]] <- as.integer(factor(train[[f]], levels=levels))
test[[f]]  <- as.integer(factor(test[[f]],  levels=levels))
}
}
# cat("train data column names after slight feature engineering\n")
# names(train)
# cat("test data column names after slight feature engineering\n")
# names(test)
set.seed(9)
gc()
tra<-train[,feature.names]
#tra<-tra[,c(1:50,65:105,110:165,180:230,245:290)]
dim(tra)
dim(test)
nrow(train)
h<-sample(nrow(train),100000)
dval<-xgb.DMatrix(data=data.matrix(tra[h,]),label=train$QuoteConversion_Flag[h])
#dtrain<-xgb.DMatrix(data=data.matrix(tra[-h,]),label=train$QuoteConversion_Flag[-h])
dtrain<-xgb.DMatrix(data=data.matrix(tra[,]),label=train$QuoteConversion_Flag)
watchlist<-list(val=dval,train=dtrain)
cl <- makeCluster(detectCores())
registerDoParallel(cl)
s <- Sys.time()
s
param <- list(objective = "binary:logistic", booster = "gbtree", eval_metric = "auc", #nthread = 8,
eta = 0.01, # 0.06, #0.01,
max_depth = 10, #changed from default of 8
subsample = 0.85, # 0.7
colsample_bytree = 0.66 # 0.7
#num_parallel_tree   = 2
# alpha = 0.0001,
# lambda = 1
)
clf <- xgboost(params = param, data = dtrain, nrounds = 10,
verbose = T, maximize = FALSE)
# xgb_grid_1 = expand.grid( nrounds = 100, eta = c(0.01), max_depth = c(10),
#                           gamma = 1, colsample_bytree = 0.66, min_child_weight =1)
#
# # pack the training control parameters
# xgb_trcontrol_1 = trainControl(method = "cv", number = 5, verboseIter = TRUE, returnData = FALSE,
#                                returnResamp = "all", # save losses across all models
#                                classProbs = TRUE,  # set to TRUE for AUC to be computed
#                                summaryFunction = twoClassSummary,
#                                allowParallel = TRUE
# )
#
# xgb_train_1 = train(QuoteConversion_Flag~., data = train[1:1000, -1],
#   trControl = xgb_trcontrol_1,
#   tuneGrid = xgb_grid_1,
#   method = "xgbTree"
# )
stopCluster(cl)
Sys.time() - s
detach("package:doParallel", unload=TRUE)
clf <- xgboost(params = param, data = dtrain, nrounds = 10,
verbose = T, maximize = FALSE)
param <- list(objective = "binary:logistic", booster = "gbtree", eval_metric = "auc", nthread = 4,
eta = 0.01, # 0.06, #0.01,
max_depth = 10, #changed from default of 8
subsample = 0.85, # 0.7
colsample_bytree = 0.66 # 0.7
#num_parallel_tree   = 2
# alpha = 0.0001,
# lambda = 1
)
clf <- xgboost(params = param, data = dtrain, nrounds = 10,
verbose = T, maximize = FALSE)
param <- list(objective = "binary:logistic", booster = "gbtree", eval_metric = "auc", nthread = 4,
eta = 0.01, # 0.06, #0.01,
max_depth = 10, #changed from default of 8
subsample = 0.85, # 0.7
colsample_bytree = 0.66 # 0.7
#num_parallel_tree   = 2
# alpha = 0.0001,
# lambda = 1
)
clf <- xgboost(params = param, data = dtrain, nrounds = 20,
verbose = T, maximize = FALSE)
install.packages(“Rcpp”)
install.packages('Rcpp')
install.packages('xgboost/R-package/', type='source')
setwd("~/")
install.packages('xgboost/R-package/', type='source')
install.packages('xgboost/R-package/', repos=NULL, type='source')
devtools::install_github("hadley/devtools")
install_github("hadley/devtools")
install.packages("devtools")
devtools::install_local('xgboost/', subdir = 'R-package')
is_using_multithread()
install.packages('mxnet/R-package/', repos=NULL, type='source')
devtools::install_local('mxnet/', subdir = 'R-package')
library(mxnet)
devtools::install_local('mxnet/', subdir = 'R-package')
install.packages('mxnet/R-package/', repos=NULL, type='source')
install.packages('mxnet/R-package/', repos=NULL, type='source')
library(mxnet)
demo(topic = "basic_bench", package = "mxnet")
print(paste0(“Finish prediction… accuracy=”, accuracy(label, pred)))
print(paste0('Finish prediction… accuracy=', accuracy(label, pred)))
install.packages("forecast")
print(paste0('Finish prediction… accuracy=', accuracy(label, pred)))
library(forecast)
print(paste0('Finish prediction… accuracy=', accuracy(label, pred)))
demo(topic = "basic_bench", package = "mxnet")
print(paste0('Finish prediction… accuracy=', accuracy(label, pred)))
demo(topic = "basic_model", package = "mxnet")
clf <- xgboost(params = param, data = dtrain, nrounds = 20,
verbose = T, maximize = FALSE)
library(xgboost)
devtools::install_local('xgboost/', subdir = 'R-package')
setwd("~/")
devtools::install_local('xgboost/', subdir = 'R-package')
library(xgboost)
clf <- xgboost(params = param, data = dtrain, nrounds = 20,
verbose = T, maximize = FALSE)
dtrain<-xgb.DMatrix(data=data.matrix(tra[,]),label=train$QuoteConversion_Flag)
clf <- xgboost(params = param, data = dtrain, nrounds = 20,
verbose = T, maximize = FALSE)
?n
library(ggmap)
library(ggplot2)
library(dplyr)
library(readr)
?n
install.packages('devtools', repo=\ 'https://cran.rstudio.com')
install.packages('devtools', repo=\'https://cran.rstudio.com')
install.packages('devtools', repo='https://cran.rstudio.com')
library(mxnet)
Sys.getenv("LD_LIBRARY_PATH")
Sys.getenv()
dyn.load('/usr/local/cuda/lib/libcudart.7.5.dylib')
dyn.load('/usr/local/cuda/lib/libcublas.dylib')
dyn.load('/usr/local/cuda/lib/libcurand.dylib')
Sys.getenv("LD_LIBRARY_PATH")
Sys.getenv("DYLD_LIBRARY_PATH")
dyn.load('/usr/local/cuda/lib/libcudart.7.5.dylib')
dyn.load('/usr/local/cuda/lib/libcublas.dylib')
dyn.load('/usr/local/cuda/lib/libcurand.dylib')
?dyn.load
?n.load
library(mxnet)
require(mxnet)
context("ndarray")
test_that("element-wise calculation for vector", {
x = 1:10
mat = mx.nd.array(as.array(x), mx.cpu(0))
expect_equal(x, as.array(mat))
expect_equal(x+1, as.array(mat+1))
expect_equal(x-10, as.array(mat-10))
expect_equal(x*20, as.array(mat*20))
expect_equal(x/3, as.array(mat/3), tolerance = 1e-5)
expect_equal(-1-x, as.array(-1-mat))
expect_equal(-5/x, as.array(-5/mat), tolerance = 1e-5)
expect_equal(x+x, as.array(mat+mat))
expect_equal(x/x, as.array(mat/mat))
expect_equal(x*x, as.array(mat*mat))
expect_equal(x-x, as.array(mat-mat))
expect_equal(as.array(1-mat), as.array(1-mat))
})
test_that("element-wise calculation for matrix", {
x = matrix(1:4, 2, 2)
mat = mx.nd.array(as.array(x), mx.cpu(0))
expect_equal(x, as.array(mat))
expect_equal(x+1, as.array(mat+1))
expect_equal(x-10, as.array(mat-10))
expect_equal(x*20, as.array(mat*20))
expect_equal(x/3, as.array(mat/3), tolerance = 1e-5)
expect_equal(-1-x, as.array(-1-mat))
expect_equal(-5/x, as.array(-5/mat), tolerance = 1e-5)
expect_equal(x+x, as.array(mat+mat))
expect_equal(x/x, as.array(mat/mat))
expect_equal(x*x, as.array(mat*mat))
expect_equal(x-x, as.array(mat-mat))
expect_equal(as.array(1-mat), as.array(1-mat))
})
test_that("ndarray ones, zeros, save and load", {
expect_equal(rep(0, 10), as.array(mx.nd.zeros(10)))
expect_equal(matrix(0, 10, 5), as.array(mx.nd.zeros(c(10, 5))))
expect_equal(rep(1, 10), as.array(mx.nd.ones(10)))
expect_equal(matrix(1, 10, 5), as.array(mx.nd.ones(c(10, 5))))
mat = mx.nd.array(1:20)
mx.nd.save(mat, 'temp.mat')
mat2 = mx.nd.load('temp.mat')
expect_true(is.mx.ndarray(mat2[[1]]))
expect_equal(as.array(mat), as.array(mat2[[1]]))
})
library(testthat)
library(mxnet)
test_check("mxnet")
a <- mx.nd.zeros(c(2, 3)) # create a 2-by-3 matrix on cpu
b <- mx.nd.zeros(c(2, 3), mx.cpu()) # create a 2-by-3 matrix on cpu
c <- mx.nd.zeros(c(2, 3), mx.gpu(0)) # create a 2-by-3 matrix on gpu 0, if you have CUA enabled.
a <- mx.nd.zeros(c(2, 3)) # create a 2-by-3 matrix on cpu
b <- mx.nd.zeros(c(2, 3), mx.cpu()) # create a 2-by-3 matrix on cpu
#c <- mx.nd.zeros(c(2, 3), mx.gpu(0)) # create a 2-by-3 matrix on gpu 0, if you have CUA enabled.
shotSel.dist <<- shot.pt %>%
group_by(ShotDist) %>%
summarise(totalFGA = sum(totalFGA)) %>%
mutate(perc = totalFGA/sum(totalFGA), y.breaks = cumsum(perc) - perc/2) %>%
slice(c(1, 8, 2:7))
shiny::runApp('Dropbox/Data project/NBAstat/app')
View(shotSel.dist)
View(shotSel.def)
shotSel.dist <<- shot.pt %>%
group_by(ShotDist) %>%
summarise(totalFGA = sum(totalFGA)) %>%
mutate(perc = totalFGA/sum(totalFGA), y.breaks = cumsum(perc) - perc/2) %>%
slice(c(1, 8, 2:7))
shiny::runApp('Dropbox/Data project/NBAstat/app')
View(shotSel.dist)
shiny::runApp('Dropbox/Data project/NBAstat/app')
shiny::runApp('Dropbox/Data project/NBAstat/app')
shiny::runApp('Dropbox/Data project/NBAstat/app')
rm(list = ls())
shiny::runApp('Dropbox/Data project/NBAstat/app')
shiny::runApp('Dropbox/Data project/NBAstat/app')
setwd("~/OneDrive")
setwd("~/OneDrive/Coursera/Reproducible Research")
library(readr)
library(ggplot2)
library(dplyr)
library(gridExtra)
df <- read_csv('repdata-data-StormData.csv')
event <- df %>%
group_by(EVTYPE) %>%
summarise(occurrence = sum(!is.na(EVTYPE)))
View(event)
event <- df %>%
group_by(EVTYPE) %>%
summarise(occurrence = sum(!is.na(EVTYPE))) %>%
order_by(occurrence)
?arrange
event <- df %>%
group_by(EVTYPE) %>%
summarise(occurrence = sum(!is.na(EVTYPE))) %>%
arrange(desc(occurrence))
event[10,]
event <- df %>%
group_by(EVTYPE) %>%
summarise(occurrence = sum(!is.na(EVTYPE))) %>%
arrange(desc(occurrence))
event[10,]
View(event)
df[df$EVTYPE == "TSTM WIND", ]$EVTYPE = "THUNDERSTORM WIND"
df[df$EVTYPE == "THUNDERSTORM WINDS", ]$EVTYPE = "THUNDERSTORM WIND"
df[df$EVTYPE == "MARINE TSTM WIND", ]$EVTYPE = "MARINE THUNDERSTORM WIND"
event <- df %>%
group_by(EVTYPE) %>%
summarise(occurrence = sum(!is.na(EVTYPE))) %>%
arrange(desc(occurrence))
event[1:10,]
unique(df$PROPDMGEXP)
unique(df$CROPDMGEXP)
?recode
df$PROPDMGEXP <- as.numeric(recode(as.character(df$PROPDMGEXP),
"'K'=1e+3;'M'=1e+6;'B'=1e+9;'m'=1e+6;'h'=1e+2;'H'=1e+2;else = 1"))
df$CROPDMGEXP <- as.numeric(recode(as.character(df$CROPDMGEXP),
"'M'=1e+6;'K'=1e+3;'m'=1e+3;'B'=1e+9;'k'=1e+3;else=1"))
library(car)
df$PROPDMGEXP <- as.numeric(recode(as.character(df$PROPDMGEXP),
"'K'=1e+3;'M'=1e+6;'B'=1e+9;'m'=1e+6;'h'=1e+2;'H'=1e+2;else = 1"))
df$CROPDMGEXP <- as.numeric(recode(as.character(df$CROPDMGEXP),
"'M'=1e+6;'K'=1e+3;'m'=1e+3;'B'=1e+9;'k'=1e+3;else=1"))
damage.health <- df %>%
group_by(EVTYPE) %>%
summarise(Total = sum(FATALITIES)+sum(INJURIES)) %>%
arrange(desc(Total))
View(damage.health)
damage.economic <- df %>%
group_by(EVTYPE) %>%
summarise(Total = sum(PROPDMG*PROPDMGEXP, na.rm = T)+sum(CROPDMG*CROPDMGEXP, na.rm = T)) %>%
arrange(desc(Total))
View(damage.economic)
ggplot(data = damage.health, aes(x = EVTYPE, y = Total)) + geom_bar()
ggplot(data = damage.health[1:5,], aes(x = EVTYPE, y = Total, fill = EVTYPE)) + geom_bar()
ggplot(data = damage.health[1:5,], aes(x = EVTYPE, y = Total, fill = EVTYPE)) + geom_bar(stat = 'identity')
ggplot(data = damage.health[1:5,], aes(x = EVTYPE, y = Total, fill = EVTYPE)) + geom_bar(stat = 'identity') +
theme_bw(base_size = 15)
ggplot(data = damage.health[1:5,], aes(x = EVTYPE, y = Total, fill = EVTYPE)) + geom_bar(stat = 'identity') +
theme_bw(base_size = 15) + theme(legend.position = c(0.8, 0.8))
ggplot(data = damage.health[1:5,], aes(x = EVTYPE, y = Total, fill = EVTYPE)) + geom_bar(stat = 'identity') +
theme_bw(base_size = 15) + theme(legend.position = c(0.2, 0.8))
ggplot(data = damage.health[1:5,], aes(x = EVTYPE, y = Total, fill = EVTYPE)) + geom_bar(stat = 'identity') +
ylab('Total Fatalities and Injuries') + xlab('Top 5 Event')
theme_bw(base_size = 15) + theme(legend.position = c(0.2, 0.8))
ggplot(data = damage.health[1:5,], aes(x = EVTYPE, y = Total, fill = EVTYPE)) + geom_bar(stat = 'identity') +
ylab('Total Fatalities and Injuries') + xlab('Top 5 Event') +
theme_bw(base_size = 15) + theme(legend.position = c(0.2, 0.8))
ggplot(data = damage.health[1:5,], aes(x = factor(EVTYPE), y = Total, fill = EVTYPE)) + geom_bar(stat = 'identity') +
ylab('Total Fatalities and Injuries') + xlab('Top 5 Event') +
theme_bw(base_size = 15) + theme(legend.position = c(0.2, 0.8))
ggplot(data = damage.health[1:5,], aes(x = factor(EVTYPE), y = Total, fill = factor(EVTYPE))) + geom_bar(stat = 'identity') +
ylab('Total Fatalities and Injuries') + xlab('Top 5 Event') +
theme_bw(base_size = 15) + theme(legend.position = c(0.2, 0.8))
ggplot(data = damage.health[1:5,], aes(x = factor(EVTYPE), y = Total, fill = factor(EVTYPE))) +
geom_bar(stat = 'identity', position = dodge) +
ylab('Total Fatalities and Injuries') + xlab('Top 5 Event') +
theme_bw(base_size = 15) + theme(legend.position = c(0.2, 0.8))
ggplot(data = damage.health[1:5,], aes(x = factor(EVTYPE), y = Total, fill = factor(EVTYPE))) +
geom_bar(stat = 'identity', position = position_dodge) +
ylab('Total Fatalities and Injuries') + xlab('Top 5 Event') +
theme_bw(base_size = 15) + theme(legend.position = c(0.2, 0.8))
ggplot(data = damage.health[1:5,], aes(x = factor(EVTYPE), y = Total, fill = factor(EVTYPE))) +
geom_bar(stat = 'identity', position = position_dodge()) +
ylab('Total Fatalities and Injuries') + xlab('Top 5 Event') +
theme_bw(base_size = 15) + theme(legend.position = c(0.2, 0.8))
ggplot(data = damage.health[1:5,], aes(x = factor(EVTYPE), y = Total, fill = factor(EVTYPE))) +
geom_bar(stat = 'identity') + scale_x_discrete(limits=unique(EVTYPE))+
ylab('Total Fatalities and Injuries') + xlab('Top 5 Event') +
theme_bw(base_size = 15) + theme(legend.position = c(0.2, 0.8))
ggplot(data = damage.health[1:5,], aes(x = factor(EVTYPE), y = Total, fill = factor(EVTYPE))) +
geom_bar(stat = 'identity') + scale_x_discrete(limits=unique(df$EVTYPE))+
ylab('Total Fatalities and Injuries') + xlab('Top 5 Event') +
theme_bw(base_size = 15) + theme(legend.position = c(0.2, 0.8))
ggplot(data = damage.health[1:5,], aes(x = factor(EVTYPE), y = Total, fill = factor(EVTYPE))) +
geom_bar(stat = 'identity') + scale_x_discrete(limits=unique(damage.health[1:5,]$EVTYPE))+
ylab('Total Fatalities and Injuries') + xlab('Top 5 Event') +
theme_bw(base_size = 15) + theme(legend.position = c(0.2, 0.8))
ggplot(data = damage.health[1:5,], aes(x = factor(EVTYPE), y = Total, fill = factor(EVTYPE))) +
geom_bar(stat = 'identity') + scale_x_discrete(limits=unique(damage.health[1:5,]$EVTYPE))+
ylab('Total Fatalities and Injuries') + xlab('Top 5 Event') +
theme_bw(base_size = 15) + theme(legend.position = c(0.6, 0.8))
ggplot(data = damage.health[1:5,], aes(x = factor(EVTYPE), y = Total, fill = factor(EVTYPE))) +
geom_bar(stat = 'identity') + scale_x_discrete(limits=unique(damage.health[1:5,]$EVTYPE))+
ylab('Total Fatalities and Injuries') + xlab('Top 5 Event') + scale_fill_discrete(name="Event Type")+
theme_bw(base_size = 15) + theme(legend.position = c(0.6, 0.8))
ggplot(data = damage.health[1:5,], aes(x = factor(EVTYPE), y = Total, fill = factor(EVTYPE))) +
geom_bar(stat = 'identity') + scale_x_discrete(limits=unique(damage.health[1:5,]$EVTYPE))+
ylab('Total Fatalities and Injuries') + xlab('Top 5 Event') + scale_fill_discrete(name="Event Type")+
theme_bw(base_size = 15) + theme(legend.position = c(0.6, 0.8), axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(data = damage.health[1:5,], aes(x = factor(EVTYPE), y = Total, fill = factor(EVTYPE))) +
geom_bar(stat = 'identity') + scale_x_discrete(limits=unique(damage.health[1:5,]$EVTYPE))+
ylab('Total Fatalities and Injuries') + xlab('Top 5 Event') + scale_fill_discrete(name="Event Type")+
theme_bw(base_size = 15) + theme(legend.position = c(0.6, 0.8), axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data = damage.health[1:5,], aes(x = factor(EVTYPE), y = Total, fill = factor(EVTYPE))) +
geom_bar(stat = 'identity') + scale_x_discrete(limits=unique(damage.health[1:5,]$EVTYPE))+
ylab('Total Fatalities and Injuries') + xlab('Top 5 Event') + scale_fill_discrete(name="Event Type")+
theme_bw(base_size = 15) + theme(legend.position = c(0.6, 0.8), axis.text.x = element_text(angle = 30, hjust = 1))
ggplot(data = damage.health[1:5,], aes(x = factor(EVTYPE), y = Total, fill = factor(EVTYPE))) +
geom_bar(stat = 'identity') + scale_x_discrete(limits=unique(damage.health[1:5,]$EVTYPE))+
ylab('Total Fatalities and Injuries') + ggtiles('Top 5 Event') + scale_fill_discrete(name="Event Type")+
theme_bw(base_size = 15) + theme(legend.position = c(0.6, 0.8), axis.text.x = element_text(angle = 30, hjust = 1))
ggplot(data = damage.health[1:5,], aes(x = factor(EVTYPE), y = Total, fill = factor(EVTYPE))) +
geom_bar(stat = 'identity') + scale_x_discrete(limits=unique(damage.health[1:5,]$EVTYPE))+
ylab('Total Fatalities and Injuries') + ggtile('Top 5 Event') + scale_fill_discrete(name="Event Type")+
theme_bw(base_size = 15) + theme(legend.position = c(0.6, 0.8), axis.text.x = element_text(angle = 30, hjust = 1))
ggplot(data = damage.health[1:5,], aes(x = factor(EVTYPE), y = Total, fill = factor(EVTYPE))) +
geom_bar(stat = 'identity') + scale_x_discrete(limits=unique(damage.health[1:5,]$EVTYPE))+
ylab('Total Fatalities and Injuries') + ggtitle('Top 5 Event') + scale_fill_discrete(name="Event Type")+
theme_bw(base_size = 15) + theme(legend.position = c(0.6, 0.8), axis.text.x = element_text(angle = 30, hjust = 1))
ggplot(data = damage.health[1:5,], aes(x = factor(EVTYPE), y = Total, fill = factor(EVTYPE))) +
geom_bar(stat = 'identity') + scale_x_discrete(limits=unique(damage.health[1:5,]$EVTYPE))+
ylab('Total Fatalities and Injuries') + ggtitle('Top 5 Event') + scale_fill_discrete(name="Event Type")+
theme_bw(base_size = 15) +
theme(legend.position = c(0.6, 0.8), axis.text.x = element_text(angle = 30, hjust = 1), xlab = element_blank())
ggplot(data = damage.health[1:5,], aes(x = factor(EVTYPE), y = Total, fill = factor(EVTYPE))) +
geom_bar(stat = 'identity') + scale_x_discrete(limits=unique(damage.health[1:5,]$EVTYPE))+
ylab('Total Fatalities and Injuries') + ggtitle('Top 5 Event') + scale_fill_discrete(name="Event Type")+
theme_bw(base_size = 15) +
theme(legend.position = c(0.6, 0.8), axis.text.x = element_text(angle = 30, hjust = 1), axis.title.x = element_blank())
ggplot(data = damage.health[1:5,], aes(x = EVTYPE, y = Total, fill = EVTYPE)) +
geom_bar(stat = 'identity') + scale_x_discrete(limits=unique(damage.health[1:5,]$EVTYPE))+
ylab('Total Fatalities and Injuries') + ggtitle('Top 5 Event') + scale_fill_discrete(name="Event Type")+
theme_bw(base_size = 15) +
theme(legend.position = c(0.6, 0.8), axis.text.x = element_text(angle = 30, hjust = 1), axis.title.x = element_blank())
ggplot(data = damage.health[1:5,], aes(x = EVTYPE, y = Total, fill = EVTYPE)) +
geom_bar(stat = 'identity') + scale_x_discrete(limits=unique(damage.health[1:5,]$EVTYPE))+
ylab('Total Fatalities and Injuries') + ggtitle('Top 5 Event') + scale_fill_discrete(name="Event Type")+
theme_bw(base_size = 15) +
theme(legend.position = c(0.6, 0.8), axis.text.x = element_text(angle = 30, hjust = 5), axis.title.x = element_blank())
ggplot(data = damage.health[1:5,], aes(x = EVTYPE, y = Total, fill = EVTYPE)) +
geom_bar(stat = 'identity') + scale_x_discrete(limits=unique(damage.health[1:5,]$EVTYPE))+
ylab('Total Fatalities and Injuries') + ggtitle('Top 5 Event') + scale_fill_discrete(name="Event Type")+
theme_bw(base_size = 15) +
theme(legend.position = c(0.6, 0.8), axis.text.x = element_text(angle = 30, hjust = 0.5), axis.title.x = element_blank())
ggplot(data = damage.health[1:5,], aes(x = EVTYPE, y = Total, fill = EVTYPE)) +
geom_bar(stat = 'identity') + scale_x_discrete(limits=unique(damage.health[1:5,]$EVTYPE))+
ylab('Total Fatalities and Injuries') + ggtitle('Top 5 Event') + scale_fill_discrete(name="Event Type")+
theme_bw(base_size = 15) +
theme(legend.position = c(0.6, 0.8), axis.text.x = element_text(angle = 20, hjust = 0.5), axis.title.x = element_blank())
ggplot(data = damage.health[1:5,], aes(x = EVTYPE, y = Total, fill = EVTYPE)) +
geom_bar(stat = 'identity') + scale_x_discrete(limits=unique(damage.health[1:5,]$EVTYPE))+
ylab('Total Fatalities and Injuries') + ggtitle('Top 5 Events') + scale_fill_discrete(name="Event Type")+
theme_bw(base_size = 15) +
theme(legend.position = c(0.6, 0.6), axis.text.x = element_text(angle = 20, hjust = 0.5), axis.title.x = element_blank())
ggplot(data = damage.health[1:5,], aes(x = EVTYPE, y = Total, fill = EVTYPE)) +
geom_bar(stat = 'identity') + scale_x_discrete(limits=unique(damage.health[1:5,]$EVTYPE))+
ylab('Total Fatalities and Injuries') + ggtitle('Top 5 Events') + scale_fill_discrete(name="Event Type")+
theme_bw(base_size = 18) +
theme(legend.position = c(0.6, 0.6), axis.text.x = element_text(angle = 20, hjust = 0.5), axis.title.x = element_blank())
ggplot(data = damage.health[1:5,], aes(x = EVTYPE, y = Total, fill = EVTYPE)) +
geom_bar(stat = 'identity') + scale_x_discrete(limits=unique(damage.health[1:5,]$EVTYPE))+
ylab('Total Fatalities and Injuries') + ggtitle('Top 5 Events that Lead to Health Damage') + scale_fill_discrete(name="Event Type")+
theme_bw(base_size = 18) +
theme(legend.position = c(0.6, 0.6), axis.text.x = element_text(angle = 20, hjust = 0.5), axis.title.x = element_blank())
ggplot(data = damage.economic[1:5,], aes(x = EVTYPE, y = Total, fill = EVTYPE)) +
geom_bar(stat = 'identity') + scale_x_discrete(limits=unique(damage.economic[1:5,]$EVTYPE))+
ylab('Total Economic Damage') + ggtitle('Top 5 Events that Lead to Economic Damage') + scale_fill_discrete(name="Event Type")+
theme_bw(base_size = 18) +
theme(legend.position = c(0.6, 0.6), axis.text.x = element_text(angle = 20, hjust = 0.5), axis.title.x = element_blank())
ggplot(data = damage.economic[1:5,], aes(x = EVTYPE, y = Total, fill = EVTYPE)) +
geom_bar(stat = 'identity') + scale_x_discrete(limits=unique(damage.economic[1:5,]$EVTYPE))+
ylab('Total Economic Damage') + ggtitle('Top 5 Events that Lead to Economic Damage') + scale_fill_discrete(name="Event Type")+
theme_bw(base_size = 18) +
theme(legend.position = c(0.6, 0.7), axis.text.x = element_text(angle = 20, hjust = 0.5), axis.title.x = element_blank())
ggplot(data = damage.economic[1:5,], aes(x = EVTYPE, y = Total, fill = EVTYPE)) +
geom_bar(stat = 'identity') + scale_x_discrete(limits=unique(damage.economic[1:5,]$EVTYPE))+
ylab('Total Economic Damage (M$)') + ggtitle('Top 5 Events that Lead to Economic Damage') + scale_fill_discrete(name="Event Type")+
theme_bw(base_size = 18) +
theme(legend.position = c(0.6, 0.7), axis.text.x = element_text(angle = 20, hjust = 0.5), axis.title.x = element_blank())
ggplot(data = damage.economic[1:5,], aes(x = EVTYPE, y = Total/1000000, fill = EVTYPE)) +
geom_bar(stat = 'identity') + scale_x_discrete(limits=unique(damage.economic[1:5,]$EVTYPE))+
ylab('Total Economic Damage (M$)') + ggtitle('Top 5 Events that Lead to Economic Damage') + scale_fill_discrete(name="Event Type")+
theme_bw(base_size = 18) +
theme(legend.position = c(0.6, 0.7), axis.text.x = element_text(angle = 20, hjust = 0.5), axis.title.x = element_blank())
df[c(8, 23:28),]
colnames(df[c(8, 23:28), ])
colnames(df)[c(8, 23:28), ]
The columns that we are intereted in are: `r colnames(df)[c(8, 23:28)]`
The columns that we are intereted in are: `r colnames(df)[8, 23:28]`
The columns that we are intereted in are: `r colnames(df)[ 23:28]`
colnames(df)
colnames(df)[1]
colnames(df)[8]
colnames(df)[c(8)]
colnames(df)[c(8, 4)]
colnames(df)[c(8, 23:28)]
dim(unique(df$EVTYPR))
dim(unique(df$EVTYPE))
View(df)
(unique(df$EVTYPE))
length(unique(df$EVTYPE))
sum(damage.health$Total)
View(damage.economic)
